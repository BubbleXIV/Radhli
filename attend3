    async def remove_event_roles(self, event_id):
        """Remove all Discord roles associated with an event"""
        try:
            print(f"Removing roles for event {event_id}")

            # Check if the event exists
            if event_id not in self.events:
                print(f"Event {event_id} not found")
                return False

            event = self.events[event_id]
            guild_id = event.get("guild_id")

            if not guild_id:
                print(f"Event {event_id} has no guild_id")
                return False

            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                print(f"Guild {guild_id} not found")
                return False

            # Remove event role from all users if it exists
            if event.get("event_role_id") and event.get("event_role_users"):
                event_role = guild.get_role(int(event.get("event_role_id")))
                if event_role:
                    print(f"Removing event role {event_role.name} from {len(event.get('event_role_users', []))} users")
                    for user_id in event.get("event_role_users", []):
                        try:
                            member = guild.get_member(int(user_id))
                            if member:
                                await member.remove_roles(event_role, reason=f"Event {event['title']} cleanup")
                                print(f"Removed event role from {member.display_name}")
                        except Exception as e:
                            print(f"Error removing event role from user {user_id}: {e}")
                else:
                    print(f"Event role {event.get('event_role_id')} not found")

            # Remove role-specific Discord roles if they exist
            for role_id, role_data in event.get("roles", {}).items():
                if role_data.get("discord_role_id") and role_data.get("users"):
                    discord_role = guild.get_role(int(role_data.get("discord_role_id")))
                    if discord_role:
                        print(f"Removing role {discord_role.name} from {len(role_data.get('users', []))} users")
                        for user_id in role_data.get("users", []):
                            try:
                                member = guild.get_member(int(user_id))
                                if member:
                                    await member.remove_roles(discord_role, reason=f"Event {event['title']} cleanup")
                                    print(f"Removed role {discord_role.name} from {member.display_name}")
                            except Exception as e:
                                print(f"Error removing role from user {user_id}: {e}")
                    else:
                        print(f"Discord role {role_data.get('discord_role_id')} not found")

            return True
        except Exception as e:
            print(f"Error removing event roles: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def remove_role_after_delay(self, event_id, delay):
        """Remove the pingable role after a delay"""
        try:
            await asyncio.sleep(delay)
            event = self.events.get(event_id)
            if not event:
                return

            guild_id = event.get("guild_id")
            role_id = event.get("role_id")  # This seems to be for a pingable role

            if not guild_id or not role_id:
                return

            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                return

            role = guild.get_role(int(role_id))
            if not role:
                return

            # Make the role not mentionable
            await role.edit(mentionable=False)
            print(f"Made role {role.name} not mentionable for event {event_id}")

        except asyncio.CancelledError:
            # Task was cancelled, that's fine
            pass
        except Exception as e:
            print(f"Error removing role for event {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def delete_embed_after_delay(self, event_id, delay):
        """Delete the event embed after a delay"""
        try:
            await asyncio.sleep(delay)

            event = self.events.get(event_id)
            if not event:
                return

            guild_id = event.get("guild_id")
            channel_id = event.get("channel_id")
            message_id = event.get("message_id")

            if not guild_id or not channel_id or not message_id:
                return

            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                return

            channel = guild.get_channel(int(channel_id))
            if not channel:
                return

            # Remove all Discord roles associated with the event before deleting
            await self.remove_event_roles(event_id)

            try:
                message = await channel.fetch_message(int(message_id))
                await message.delete()
                print(f"Deleted event embed for event {event_id}")
            except discord.NotFound:
                print(f"Event embed for event {event_id} already deleted")

            # If this is a recurring event, schedule the next occurrence
            if event.get("recurring"):
                await self.schedule_next_occurrence(event_id)
            else:
                # If not recurring, remove the event from storage
                del self.events[event_id]
                await self.save_events(guild_id)

        except asyncio.CancelledError:
            # Task was cancelled, that's fine
            pass
        except Exception as e:
            print(f"Error deleting embed for event {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def post_event_message(self, event_id, delay):
        """Post an event message after a delay"""
        try:
            await asyncio.sleep(delay.total_seconds())

            if event_id not in self.events:
                print(f"Event {event_id} not found when trying to post message")
                return

            event = self.events[event_id]

            # Check if the message has already been posted
            if "message_id" in event and event["message_id"]:
                print(f"Event {event_id} already has a message, skipping post")
                return

            # Get the channel
            channel_id = event.get("channel_id")
            if not channel_id:
                print(f"Event {event_id} has no channel_id")
                return

            channel = self.bot.get_channel(int(channel_id))
            if not channel:
                print(f"Channel {channel_id} not found for event {event_id}")
                return

            # Create the embed and view
            embed = await self.create_event_embed(event_id)
            view = AttendanceView(self, event_id)

            # Check for staff ping
            content = None
            if event.get("staff_ping_role_id"):
                guild = self.bot.get_guild(int(event["guild_id"]))
                if guild:
                    role = guild.get_role(int(event["staff_ping_role_id"]))
                    if role:
                        content = role.mention

            # Send the message with staff ping (if any)
            message = await channel.send(content=content, embed=embed, view=view)

            # Update the event with the message ID
            self.events[event_id]["message_id"] = str(message.id)

            # Save the events
            await self.save_events(event.get("guild_id"), update_message=False)
            print(f"Posted message for event {event_id}: {message.id}")

            # Schedule reminder for the event
            event_time_str = event["time"]
            event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
            reminder_diff = event_time - datetime.now(pytz.UTC)

            if reminder_diff.total_seconds() > 1800:  # Only schedule if more than 30 minutes away
                self.reminder_tasks[event_id] = self.bot.loop.create_task(
                    self.send_reminder(event_id, reminder_diff)
                )

            # Schedule cleanup for the event (2 days after)
            cleanup_time = event_time + timedelta(days=2)
            cleanup_diff = cleanup_time - datetime.now(pytz.UTC)

            if cleanup_diff.total_seconds() > 0:
                print(f"Scheduling cleanup for event {event_id} in {cleanup_diff.total_seconds()} seconds")
                self.cleanup_tasks[event_id] = self.bot.loop.create_task(
                    self.cleanup_event(event_id, cleanup_diff)
                )

        except Exception as e:
            print(f"Error posting event message: {e}")
            import traceback
            traceback.print_exc()

    async def post_recurring_event(self, event_id, time_diff):
        """Post a recurring event when it's time"""
        try:
            # Get the event
            event = self.events.get(event_id)
            if not event:
                print(f"Event {event_id} not found")
                return

            # Get the event time
            event_time_str = event.get("time")
            if not event_time_str:
                print(f"Event {event_id} has no time")
                return

            # Parse the event time
            event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M")
            event_time = event_time.replace(tzinfo=pytz.UTC)

            # Calculate when to post (3 days before the event)
            now = self.get_time_provider().now(pytz.UTC)

            time_to_event = event_time - now

            # Wait until it's time to post the event (3 days before the event date)
            posting_delay = time_to_event.total_seconds() - (3 * 24 * 60 * 60)  # 3 days in seconds
            if posting_delay > 0:
                print(f"Waiting {posting_delay} seconds to post event {event_id} (3 days before it occurs)")
                await asyncio.sleep(posting_delay)

            # Check if the event still exists
            if event_id not in self.events:
                return
            event = self.events[event_id]

            # Check if the message has already been posted
            if event.get("message_id"):
                print(f"Event {event_id} already has a message, skipping post")
                return

            # Check if a similar event already exists
            event_time_str = event["time"]
            event_title = event["title"]
            duplicate_found = False
            for existing_id, existing_event in self.events.items():
                if existing_id != event_id and existing_event.get("title") == event_title and existing_event.get(
                        "time") == event_time_str:
                    print(f"Found duplicate event {existing_id} with same title and time, skipping creation")
                    duplicate_found = True
                    break

            if duplicate_found:
                # Delete this duplicate event
                del self.events[event_id]
                await self.save_events(event["guild_id"])
                return

            # Create the embed and view
            embed = await self.create_event_embed(event_id)
            view = AttendanceView(self, event_id)

            # Send the message
            channel = self.bot.get_channel(int(event["channel_id"]))
            if not channel:
                print(f"Channel {event['channel_id']} not found for recurring event {event_id}")
                return

            try:
                # Check for staff ping
                content = None
                if event.get("staff_ping_role_id"):
                    guild = self.bot.get_guild(int(event["guild_id"]))
                    if guild:
                        role = guild.get_role(int(event["staff_ping_role_id"]))
                        if role:
                            content = role.mention

                message = await channel.send(content=content, embed=embed, view=view)
                event["message_id"] = message.id
                # Save the updated event
                await self.save_events(event["guild_id"], update_message=False)

                # Schedule reminder and cleanup for the new event
                event_time_str = event["time"]
                event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
                reminder_diff = event_time - datetime.now(pytz.UTC)
                if reminder_diff.total_seconds() > 1800:  # Only schedule if more than 30 minutes away
                    self.reminder_tasks[event_id] = self.bot.loop.create_task(
                        self.send_reminder(event_id, reminder_diff)
                    )

                # Clean up 2 days after the event
                cleanup_time = event_time + timedelta(days=2)
                cleanup_diff = cleanup_time - datetime.now(pytz.UTC)
                self.cleanup_tasks[event_id] = self.bot.loop.create_task(
                    self.cleanup_event(event_id, cleanup_diff)
                )

                # Schedule the next occurrence
                await self.schedule_next_occurrence(event_id)
            except Exception as e:
                print(f"Error posting recurring event {event_id}: {e}")
                import traceback
                traceback.print_exc()
        except Exception as e:
            print(f"Error in post_recurring_event for {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def send_reminder(self, event_id, time_diff):
        """Send a reminder for an event"""
        try:
            # Wait until 30 minutes before the event
            reminder_time = time_diff.total_seconds() - 1800  # 30 minutes in seconds
            print(f"Scheduling reminder for event {event_id} in {reminder_time} seconds")
            if reminder_time > 0:
                await asyncio.sleep(reminder_time)

            print(f"Sending reminder for event {event_id}")

            # Check if the event still exists
            event = self.events.get(event_id)
            if not event:
                print(f"Event {event_id} no longer exists")
                return

            # Check if we've already sent a reminder for this event
            last_reminder_key = f"last_reminder_{event_id}"
            if last_reminder_key in event:
                try:
                    event_time = datetime.strptime(event.get("time"), "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
                    last_reminder_time = datetime.strptime(event[last_reminder_key], "%Y-%m-%d %H:%M")
                    last_reminder_time = last_reminder_time.replace(tzinfo=pytz.UTC)
                    # If we've already sent a reminder after the event was created, don't send another one
                    if last_reminder_time > event_time - timedelta(hours=1):  # Within 1 hour of event time
                        print(f"Already sent a reminder for event {event_id} recently")
                        return
                except Exception as e:
                    print(f"Error checking last reminder time: {e}")
                    # Continue with sending the reminder

            # Get the guild and channel
            guild = self.bot.get_guild(int(event["guild_id"]))
            if not guild:
                print(f"Guild {event['guild_id']} not found for event {event_id}")
                return

            channel = guild.get_channel(int(event["channel_id"]))
            if not channel:
                print(f"Channel {event['channel_id']} not found for event {event_id}")
                return

            # Get the message
            try:
                message = await channel.fetch_message(int(event["message_id"]))
                print(f"Found message for event {event_id}")
            except Exception as e:
                print(f"Error fetching message for event {event_id}: {e}")
                return

            # Always create a NEW thread for each event occurrence
            thread = None
            try:
                print(f"Creating new thread for event {event_id}")
                thread = await message.create_thread(
                    name=f"Discussion: {event['title']} - {event.get('time', '')}",
                    auto_archive_duration=1440  # 24 hours
                )
                # Save the thread ID to the event data
                self.events[event_id]["thread_id"] = thread.id
                await self.save_events(int(event["guild_id"]))
                print(f"Thread created for event {event_id}: {thread.id}")
            except Exception as e:
                print(f"Error creating thread for event {event_id}: {e}")
                return

            # Format the reminder message
            title = event.get('title', 'Untitled Event')
            location = event.get('location', 'Not specified')

            # Parse the event time
            event_time_str = event.get('time', '')
            try:
                event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
                # Format as Discord timestamp for local time conversion
                # This will show the time in each user's local timezone
                discord_timestamp = f"<t:{int(event_time.timestamp())}:F>"
                start_time = discord_timestamp
            except ValueError:
                start_time = event_time_str

            # Build the reminder message
            reminder_message = "Look alive! We start in 30 minutes!\n\n"
            reminder_message += f"{title}\n"
            reminder_message += f"Location: {location}\n"
            reminder_message += f"Start time: {start_time}\n\n"

            # Add pings section
            pings = []

            # First add the pingable role if it exists
            if event.get("event_role_id"):
                role = guild.get_role(int(event["event_role_id"]))
                if role:
                    pings.append(role.mention)

            # Then add individual user pings
            for role_id, role_data in event["roles"].items():
                for user_id in role_data.get("users", []):
                    pings.append(f"<@{user_id}>")

            # Add the pings to the message if there are any
            if pings:
                reminder_message += " ".join(pings)

            # Send the reminder in the thread
            try:
                await thread.send(reminder_message)
                print(f"Sent reminder for event {event_id} in thread")

                # Record that we sent a reminder
                self.events[event_id][f"last_reminder_{event_id}"] = datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M")
                await self.save_events(int(event["guild_id"]))

            except Exception as e:
                print(f"Error sending reminder in thread for event {event_id}: {e}")

        except asyncio.CancelledError:
            # Task was cancelled, that's fine
            print(f"Reminder task for event {event_id} was cancelled")
        except Exception as e:
            print(f"Unexpected error in send_reminder for event {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def cleanup_event(self, event_id, time_diff):
        """Clean up an event after it's over"""
        try:
            # Wait until 2 days after the event
            cleanup_delay = time_diff.total_seconds() + 2 * 24 * 60 * 60
            if cleanup_delay > 0:
                print(f"Scheduling cleanup for event {event_id} in {cleanup_delay} seconds")
                await asyncio.sleep(cleanup_delay)

            print(f"Starting cleanup for event {event_id}")

            # Check if the event still exists
            if event_id not in self.events:
                print(f"Event {event_id} no longer exists, skipping cleanup.")
                return

            event = self.events[event_id]

            # Remove all Discord roles associated with the event
            await self.remove_event_roles(event_id)

            # Delete the event message if it exists
            if "message_id" in event and "channel_id" in event:
                try:
                    channel = self.bot.get_channel(int(event.get("channel_id")))
                    if channel:
                        try:
                            message = await channel.fetch_message(int(event.get("message_id")))
                            await message.delete()
                            print(f"Deleted message for event {event_id}")
                        except discord.NotFound:
                            print(f"Message for event {event_id} already deleted")
                except Exception as e:
                    print(f"Error deleting message for event {event_id}: {e}")

            # Delete the thread if it exists
            if "thread_id" in event and "channel_id" in event:
                try:
                    channel = self.bot.get_channel(int(event.get("channel_id")))
                    if channel:
                        thread = channel.get_thread(int(event.get("thread_id")))
                        if thread:
                            await thread.delete()
                            print(f"Deleted thread for event {event_id}")
                except Exception as e:
                    print(f"Error deleting thread for event {event_id}: {e}")

            # Handle recurring vs non-recurring events
            if event.get("recurring"):
                print(f"Event {event_id} is recurring, scheduling next occurrence")
                # For recurring events, schedule the next occurrence
                await self.schedule_next_occurrence(event_id)
            else:
                print(f"Event {event_id} is not recurring, removing from storage")
                # For non-recurring events, just delete
                del self.events[event_id]
                await self.save_events(event.get("guild_id"))

            # Clean up the cleanup task
            if event_id in self.cleanup_tasks:
                del self.cleanup_tasks[event_id]

            print(f"Cleanup completed for event {event_id}")

        except asyncio.CancelledError:
            print(f"Cleanup task for event {event_id} was cancelled")
        except Exception as e:
            print(f"Error during cleanup of event {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def cleanup_old_events(self):
        """Clean up old events on startup"""
        try:
            now = self.get_time_provider().now(pytz.UTC)
            print(f"Cleaning up old events at {now}")
            cleanup_count = 0
            next_occurrence_count = 0

            # Create a copy of the events list to avoid modification during iteration
            events_to_process = list(self.events.items())

            for event_id, event in events_to_process:
                try:
                    # Double-check the event still exists (in case another process deleted it)
                    if event_id not in self.events:
                        print(f"Event {event_id} was already deleted, skipping")
                        continue

                    # Skip events that don't have a time
                    if not event.get("time"):
                        continue

                    # Parse the event time
                    event_time_str = event.get("time")
                    event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M")
                    event_time = event_time.replace(tzinfo=pytz.UTC)

                    # Calculate time difference
                    time_diff = event_time - now

                    # If this is a non-recurring event that's more than 2 days old
                    if not event.get("recurring") and time_diff.total_seconds() < -2 * 24 * 60 * 60:
                        print(f"Cleaning up old non-recurring event: {event_id}")
                        if await self.delete_event(event_id):
                            cleanup_count += 1

                    # If this is a recurring event that's more than 2 days old
                    elif event.get("recurring") and time_diff.total_seconds() < -2 * 24 * 60 * 60:
                        print(f"Scheduling next occurrence for old recurring event: {event_id}")
                        await self.schedule_next_occurrence(event_id)
                        next_occurrence_count += 1

                    # If this is a future event, schedule its cleanup
                    elif time_diff.total_seconds() > 0:
                        cleanup_time = event_time + timedelta(days=2)
                        cleanup_diff = cleanup_time - now
                        if cleanup_diff.total_seconds() > 0:
                            print(f"Scheduling cleanup for future event {event_id}")
                            self.cleanup_tasks[event_id] = self.bot.loop.create_task(
                                self.cleanup_event(event_id, time_diff)
                            )

                except Exception as e:
                    print(f"Error processing event {event_id} during cleanup: {e}")
                    import traceback
                    traceback.print_exc()

            print(
                f"Cleanup completed: {cleanup_count} events cleaned up, {next_occurrence_count} recurring events scheduled")

        except Exception as e:
            print(f"Error during cleanup_old_events: {e}")
            import traceback
            traceback.print_exc()
