import asyncio
import csv
import discord
import io
import json
import os
import pytz
import shutil
import re
import datetime
import copy
import glob
import logging
import time
from dateutil.rrule import rrulestr
from datetime import datetime, timedelta
from discord import app_commands
from discord.ext import commands, tasks
from pytz import timezone
from discord.ui import Button, View
from typing import Dict, List, Optional, Union
import sqlite3

# Constants
PASTEL_BLUE = 0x9DB2FF
PASTEL_RED = 0xFF9D9D
PASTEL_GREEN = 0x9DFFB2
DATA_FOLDER = "data"

logger = logging.getLogger(__name__)


class AttendanceTracker:
    def __init__(self):
        # Use JSON-based storage
        self.data_file = os.path.join("data", "attendance_records.json")

        # Ensure directory exists
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)

        # Initialize with default structure
        self.attendance_data = {
            "records": [],
            "last_id": 0
        }

        # Load existing data if available
        self.load_data()

    def load_data(self):
        """Load attendance data from file"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r') as f:
                    loaded_data = json.load(f)

                    # Ensure the loaded data has the required structure
                    if isinstance(loaded_data, dict) and "records" in loaded_data and "last_id" in loaded_data:
                        self.attendance_data = loaded_data
                    else:
                        # Convert old format to new format if needed
                        if isinstance(loaded_data, list):
                            # Old format was just a list of records
                            self.attendance_data = {
                                "records": loaded_data,
                                "last_id": len(loaded_data)
                            }
                        else:
                            # Initialize with default structure
                            self.attendance_data = {
                                "records": [],
                                "last_id": 0
                            }
                        print("Converted attendance data to new format")
                        self.save_data()
        except Exception as e:
            print(f"Error loading attendance data: {e}")
            # Initialize with empty structure
            self.attendance_data = {
                "records": [],
                "last_id": 0
            }
            self.save_data()

    def save_data(self):
        """Save attendance data to file"""
        try:
            with open(self.data_file, 'w') as f:
                json.dump(self.attendance_data, f, indent=4)
            return True
        except Exception as e:
            print(f"Error saving attendance data: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def record_attendance(self, guild_id, user_id, event_id, event_title, event_time, role_id, role_name):
        """Record a user's attendance for an event"""
        try:
            # Check if this attendance record already exists
            for record in self.attendance_data["records"]:
                if (record["guild_id"] == str(guild_id) and
                        record["user_id"] == str(user_id) and
                        record["event_id"] == str(event_id) and
                        record["role_id"] == str(role_id)):
                    # Already exists, update it
                    record["role_name"] = role_name
                    record["event_title"] = event_title
                    record["event_time"] = event_time
                    record["timestamp"] = datetime.now().isoformat()
                    self.save_data()
                    return True

            # Create a new record
            record = {
                "id": self.attendance_data["last_id"] + 1,
                "guild_id": str(guild_id),
                "user_id": str(user_id),
                "event_id": str(event_id),
                "event_title": event_title,
                "event_time": event_time,
                "role_id": str(role_id),
                "role_name": role_name,
                "timestamp": datetime.now().isoformat()
            }

            # Add to records and update last_id
            self.attendance_data["records"].append(record)
            self.attendance_data["last_id"] += 1

            # Save to file
            self.save_data()
            return True
        except Exception as e:
            print(f"Error recording attendance: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def delete_attendance(self, guild_id, user_id, event_id, role_id):
        """Delete a user's attendance record"""
        try:
            # Find the record to delete
            for i, record in enumerate(self.attendance_data["records"]):
                if (record["guild_id"] == str(guild_id) and
                        record["user_id"] == str(user_id) and
                        record["event_id"] == str(event_id) and
                        record["role_id"] == str(role_id)):
                    # Remove the record
                    self.attendance_data["records"].pop(i)
                    self.save_data()
                    return True
            return False
        except Exception as e:
            print(f"Error deleting attendance: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def update_attendance(self, guild_id, event_id, user_id, role_id, role_name, event_title, event_time,
                                old_role_id=None):
        """Update a user's attendance record"""
        try:
            # First delete the old record
            if old_role_id:
                await self.delete_attendance(guild_id, user_id, event_id, old_role_id)
            else:
                await self.delete_attendance(guild_id, user_id, event_id, role_id)

            # Then create a new one
            return await self.record_attendance(
                guild_id=guild_id,
                user_id=user_id,
                event_id=event_id,
                event_title=event_title,
                event_time=event_time,
                role_id=role_id,
                role_name=role_name
            )
        except Exception as e:
            print(f"Error updating attendance: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def get_user_attendance(self, guild_id, user_id):
        """Get all attendance records for a user in a guild"""
        try:
            records = []
            for record in self.attendance_data["records"]:
                if record["guild_id"] == str(guild_id) and record["user_id"] == str(user_id):
                    records.append(record)
            return records
        except Exception as e:
            print(f"Error getting user attendance: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def get_event_attendance(self, guild_id, event_id):
        """Get all attendance records for an event"""
        try:
            records = []
            for record in self.attendance_data["records"]:
                if record["guild_id"] == str(guild_id) and record["event_id"] == str(event_id):
                    records.append(record)
            return records
        except Exception as e:
            print(f"Error getting event attendance: {e}")
            import traceback
            traceback.print_exc()
            return []

    def get_guild_attendance_stats(self, guild_id, days=30):
        """Get attendance statistics for a guild"""
        try:
            # Convert to string
            guild_id = str(guild_id)

            # Calculate the date threshold
            threshold_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")

            # Find all records for this guild within the time period
            guild_records = [
                record for record in self.attendance_data["records"]
                if record["guild_id"] == guild_id and
                   record.get("event_time", "").split(" ")[0] >= threshold_date
            ]

            # Get unique events and users
            unique_events = set()
            unique_users = set()
            event_attendance = {}  # event_id -> list of user_ids
            user_attendance = {}  # user_id -> list of event_ids

            for record in guild_records:
                event_id = record.get("event_id")
                user_id = record.get("user_id")
                event_title = record.get("event_title", "Unknown")

                if event_id and user_id:
                    unique_events.add(event_id)
                    unique_users.add(user_id)

                    # Track which users attended which events
                    if event_id not in event_attendance:
                        event_attendance[event_id] = {
                            "title": event_title,
                            "users": set()
                        }
                    event_attendance[event_id]["users"].add(user_id)

                    # Track which events each user attended
                    if user_id not in user_attendance:
                        user_attendance[user_id] = set()
                    user_attendance[user_id].add(event_id)

            # Get most active users
            most_active_users = sorted(
                [{"user_id": user_id, "event_count": len(events)}
                 for user_id, events in user_attendance.items()],
                key=lambda x: x["event_count"],
                reverse=True
            )[:5]

            # Get most popular events
            most_popular_events = sorted(
                [{"event_id": event_id, "event_title": data["title"], "user_count": len(data["users"])}
                 for event_id, data in event_attendance.items()],
                key=lambda x: x["user_count"],
                reverse=True
            )[:5]

            # Format the statistics
            stats = {
                "total_events": len(unique_events),
                "total_attendees": len(unique_users),
                "most_active_users": most_active_users,
                "most_popular_events": most_popular_events
            }

            return stats
        except Exception as e:
            print(f"Error getting guild attendance stats: {e}")
            import traceback
            traceback.print_exc()
            return {
                "total_events": 0,
                "total_attendees": 0,
                "most_active_users": [],
                "most_popular_events": []
            }


class DeleteConfirmationView(discord.ui.View):
    def __init__(self, cog, guild_id):
        super().__init__(timeout=60)  # 60 seconds timeout
        self.cog = cog
        self.guild_id = guild_id

    @discord.ui.button(label="Yes, delete ALL events", style=discord.ButtonStyle.danger)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Delete all events
        deleted_count = await self.cog.delete_all_events(self.guild_id)

        # Disable all buttons
        for item in self.children:
            item.disabled = True

        # Update the message
        await interaction.response.edit_message(
            content=f"✅ Successfully deleted {deleted_count} events from this server.",
            view=self
        )

    @discord.ui.button(label="Cancel", style=discord.ButtonStyle.secondary)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Disable all buttons
        for item in self.children:
            item.disabled = True

        # Update the message
        await interaction.response.edit_message(
            content="Operation cancelled. No events were deleted.",
            view=self
        )

    async def on_timeout(self):
        # Disable all buttons when the view times out
        for item in self.children:
            item.disabled = True


class RoleButton(discord.ui.Button):
    # Class variable to track button cooldowns
    _cooldowns = {}

    def __init__(self, cog, event_id, role_id, label, style, disabled=False, required_role_id=None):
        # Create a custom_id that uniquely identifies this button
        custom_id = f"attendance:{event_id}:{role_id}:toggle"
        super().__init__(
            style=style,
            label=label,
            disabled=disabled,
            custom_id=custom_id
        )
        self.cog = cog
        self.event_id = event_id
        self.role_id = role_id
        self.required_role_id = required_role_id

    async def callback(self, interaction: discord.Interaction):
        """Handle button click with debounce protection"""
        # Create a unique key for this user, event, and role
        user_id = str(interaction.user.id)
        cooldown_key = f"{user_id}:{self.event_id}:{self.role_id}"

        # Check if the button is on cooldown (1 second cooldown)
        current_time = datetime.now().timestamp()
        if cooldown_key in RoleButton._cooldowns:
            last_click = RoleButton._cooldowns[cooldown_key]
            if current_time - last_click < 1.0:  # 1 second cooldown
                # Button was clicked too recently, ignore this click
                try:
                    if not interaction.response.is_done():
                        await interaction.response.defer(ephemeral=True)
                except Exception as e:
                    print(f"Error deferring interaction during cooldown: {e}")
                return

        # Update the cooldown timestamp
        RoleButton._cooldowns[cooldown_key] = current_time

        # Defer the response immediately
        try:
            if not interaction.response.is_done():
                await interaction.response.defer(ephemeral=True)
        except Exception as e:
            print(f"Error deferring interaction in button callback: {e}")

        try:
            # Call the handler in the cog
            await self.cog.toggle_role(interaction, self.event_id, self.role_id)
        except Exception as e:
            print(f"Error in RoleButton callback: {e}")
            import traceback
            traceback.print_exc()
            try:
                await interaction.followup.send(f"An error occurred: {str(e)}", ephemeral=True)
            except Exception as follow_up_error:
                print(f"Error sending followup: {follow_up_error}")

class AttendanceView(discord.ui.View):
    def __init__(self, cog, event_id):
        super().__init__(timeout=None)  # Make the view persistent
        self.cog = cog
        self.event_id = event_id

        # Clear any existing items
        self.clear_items()

        # Add buttons for each role if event_id in self.cog.events
        if event_id in self.cog.events:
            event = self.cog.events[event_id]
            for role_id, role_data in event["roles"].items():
                if role_data.get("name"):  # Only add buttons for roles with names
                    # Determine button style
                    style = discord.ButtonStyle.primary  # Default is blue

                    # If the role is restricted, make it red
                    if role_data.get("restricted", False):
                        style = discord.ButtonStyle.danger  # Red
                    # Otherwise use the specified style if available
                    elif role_data.get("style") == "green":
                        style = discord.ButtonStyle.success
                    elif role_data.get("style") == "red":
                        style = discord.ButtonStyle.danger
                    elif role_data.get("style") == "gray":
                        style = discord.ButtonStyle.secondary

                    # Create the button using RoleButton class
                    button = RoleButton(
                        cog=self.cog,
                        event_id=event_id,
                        role_id=role_id,
                        label=role_data["name"],
                        style=style,
                        disabled=role_data.get("disabled", False),
                        required_role_id=role_data.get("required_role_id")
                    )
                    self.add_item(button)


class Attendance(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.events = {}
        self.reminder_tasks = {}
        self.cleanup_tasks = {}
        self.pending_tasks = {}
        self.recurring_tasks = {}
        self.data_dir = "data"

        # Set up all data storage
        self.setup_data_storage()

        # We'll load events when the bot is ready
        self.bot.loop.create_task(self.load_all_events_when_ready())

        # Start the check_events task
        self.check_events.start()

    def cog_load(self):
        """Called when the cog is loaded"""
        # Only start the task if it's not already running
        if not self.check_events.is_running():
            self.check_events.start()

        # Clean up old events
        asyncio.create_task(self.cleanup_old_events())

    def cog_unload(self):
        """Called when the cog is unloaded"""
        # Stop the task if it's running
        if self.check_events.is_running():
            self.check_events.cancel()

    def get_time_provider(self):
        """Get the time provider from the TimeAcceleration cog, or use the default"""
        time_accel_cog = self.bot.get_cog("TimeAcceleration")
        if time_accel_cog and hasattr(time_accel_cog, 'time_provider'):
            return time_accel_cog.time_provider

        # Return a default time provider that just uses the real time
        class DefaultTimeProvider:
            def now(self, tz=None):
                return datetime.now(tz)

        return DefaultTimeProvider()
