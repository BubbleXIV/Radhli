   async def setup_persistent_views(self):
        """Set up persistent views for all events"""
        try:
            print("Setting up persistent views for attendance...")
            # Load events first
            await self.load_events()

            # Create a view for each event
            view_count = 0
            for event_id, event in list(self.events.items()):
                try:
                    # Check if the event has a message_id and channel_id
                    if "message_id" in event and "channel_id" in event and event["message_id"]:
                        # Only set up view for existing messages, don't create new ones
                        view = AttendanceView(self, event_id)
                        self.bot.add_view(view, message_id=int(event["message_id"]))
                        view_count += 1
                        print(f"Set up persistent view for event {event_id} with message {event['message_id']}")
                    else:
                        # For events without message_id, schedule them properly instead of posting immediately
                        await self.schedule_event_posting(event_id)

                except Exception as e:
                    print(f"Error setting up view for event {event_id}: {e}")

            print(f"Attendance views set up successfully: {view_count} views")
            print("Running startup cleanup of old events...")
            await self.cleanup_old_events_on_startup()

        except Exception as e:
            print(f"Error setting up persistent views: {e}")
            import traceback
            traceback.print_exc()

    async def schedule_event_posting(self, event_id):
        """Schedule an event to be posted 3 days before it occurs"""
        try:
            if event_id not in self.events:
                return

            event = self.events[event_id]

            # Skip if event already has a message
            if event.get("message_id"):
                print(f"Event {event_id} already has message_id {event['message_id']}, skipping scheduling")
                return

            # Parse event time
            event_time_str = event.get("time")
            if not event_time_str:
                print(f"Event {event_id} has no time")
                return

            event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
            now = self.get_time_provider().now(pytz.UTC)

            # Calculate when to post (3 days before event)
            post_time = event_time - timedelta(days=3)
            time_until_post = post_time - now

            if time_until_post.total_seconds() > 0:
                # Schedule posting for 3 days before
                print(
                    f"Scheduling event {event_id} to post in {time_until_post.total_seconds()} seconds (3 days before event)")
                self.recurring_tasks[event_id] = self.bot.loop.create_task(
                    self.post_event_after_delay(event_id, time_until_post.total_seconds())
                )
            elif (event_time - now).total_seconds() > 0:
                # Event is less than 3 days away but still in future - post now
                print(f"Event {event_id} is less than 3 days away, posting immediately")
                await self.post_event_message_now(event_id)
            else:
                # Event is in the past - handle cleanup or next occurrence
                print(f"Event {event_id} is in the past")
                if event.get("recurring"):
                    await self.schedule_next_occurrence(event_id)

        except Exception as e:
            print(f"Error scheduling event posting for {event_id}: {e}")
            import traceback
            traceback.print_exc()

    async def post_event_after_delay(self, event_id, delay_seconds):
        """Post an event after a specific delay"""
        try:
            await asyncio.sleep(delay_seconds)
            await self.post_event_message_now(event_id)
        except asyncio.CancelledError:
            print(f"Event posting cancelled for {event_id}")
        except Exception as e:
            print(f"Error in post_event_after_delay for {event_id}: {e}")

    async def schedule_event_tasks(self, event_id):
        """Schedule reminder and cleanup tasks for an event"""
        try:
            if event_id not in self.events:
                return

            event = self.events[event_id]
            event_time_str = event["time"]
            event_time = datetime.strptime(event_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=pytz.UTC)
            now = self.get_time_provider().now(pytz.UTC)

            # Schedule reminder if event is more than 30 minutes away
            reminder_diff = event_time - now
            if reminder_diff.total_seconds() > 1800:  # More than 30 minutes
                self.reminder_tasks[event_id] = self.bot.loop.create_task(
                    self.send_reminder(event_id, reminder_diff)
                )

            # Schedule cleanup (2 days after event)
            cleanup_time = event_time + timedelta(days=2)
            cleanup_diff = cleanup_time - now
            if cleanup_diff.total_seconds() > 0:
                self.cleanup_tasks[event_id] = self.bot.loop.create_task(
                    self.cleanup_event(event_id, cleanup_diff)
                )

        except Exception as e:
            print(f"Error scheduling tasks for event {event_id}: {e}")

    async def delete_all_events(self, guild_id):
        """Delete all events for a guild"""
        guild_id = str(guild_id)
        # Find all events for this guild
        events_to_delete = [event_id for event_id, event in self.events.items()
                            if str(event.get("guild_id")) == guild_id]

        # Delete each event
        deleted_count = 0
        for event_id in events_to_delete:
            if await self.delete_event(event_id):
                deleted_count += 1

        return deleted_count

    def can_bypass_signup_restrictions(self, member, guild):
        """Check if a member can bypass signup restrictions"""
        # Check if the bot has signup_bypass_roles attribute
        if not hasattr(self.bot, 'signup_bypass_roles'):
            return False
        # Get the bypass roles for this guild
        guild_id = str(guild.id)
        bypass_role_ids = self.bot.signup_bypass_roles.get(guild_id, [])
        # Check if the member has any of the bypass roles
        for role in member.roles:
            if str(role.id) in bypass_role_ids:
                return True
        return False

    async def update_event_message(self, event_id):
        """Update the event message with the latest information"""
        try:
            if event_id not in self.events:
                print(f"Event {event_id} not found in self.events")
                return False

            event = self.events[event_id]
            guild_id = event.get("guild_id")
            channel_id = event.get("channel_id")
            message_id = event.get("message_id")

            # If message_id is missing, try to create a new message
            if not message_id:
                print(f"Event {event_id} is missing message_id, attempting to create a new message")
                if channel_id:
                    try:
                        channel = self.bot.get_channel(int(channel_id))
                        if channel:
                            embed = await self.create_event_embed(event_id)
                            view = AttendanceView(self, event_id)
                            message = await channel.send(embed=embed, view=view)
                            self.events[event_id]["message_id"] = str(message.id)
                            await self.save_events(guild_id)
                            print(f"Created new message for event {event_id}: {message.id}")
                            return True
                    except Exception as e:
                        print(f"Error creating new message: {e}")
                return False

            if not all([guild_id, channel_id, message_id]):
                print(
                    f"Missing required data for event {event_id}: guild_id={guild_id}, channel_id={channel_id}, message_id={message_id}")
                return False

            # Get the guild, channel, and message
            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                print(f"Guild {guild_id} not found")
                return False

            channel = guild.get_channel(int(channel_id))
            if not channel:
                print(f"Channel {channel_id} not found in guild {guild_id}")
                return False

            try:
                message = await channel.fetch_message(int(message_id))
            except discord.NotFound:
                print(f"Message {message_id} not found in channel {channel_id}, creating new message")
                try:
                    embed = await self.create_event_embed(event_id)
                    view = AttendanceView(self, event_id)
                    message = await channel.send(embed=embed, view=view)
                    self.events[event_id]["message_id"] = str(message.id)
                    await self.save_events(guild_id)
                    print(f"Created new message for event {event_id}: {message.id}")
                    return True
                except Exception as e:
                    print(f"Error creating new message: {e}")
                    return False
            except Exception as e:
                print(f"Error fetching message: {e}")
                return False

            # Create the updated embed
            embed = await self.create_event_embed(event_id)

            # Update the message
            view = AttendanceView(self, event_id)
            await message.edit(embed=embed, view=view)
            print(f"Successfully updated message for event {event_id}")
            return True
        except Exception as e:
            print(f"Error updating event message: {e}")
            import traceback
            traceback.print_exc()
            return False

    def create_event_view(self, event_id):
        """Create a view for an event with role buttons"""
        event = self.events.get(event_id)
        if not event:
            return None

        view = discord.ui.View(timeout=None)

        # Add buttons for each role
        for role_id, role_data in event.get("roles", {}).items():
            # Skip roles without names
            if not role_data.get("name"):
                continue

            # Determine button style
            style = discord.ButtonStyle.primary  # Default is blue

            # If the role is restricted, make it red
            if role_data.get("restricted", False):
                style = discord.ButtonStyle.danger  # Red
            # Otherwise use the specified style if available
            elif role_data.get("style") == "green":
                style = discord.ButtonStyle.success
            elif role_data.get("style") == "red":
                style = discord.ButtonStyle.danger
            elif role_data.get("style") == "gray":
                style = discord.ButtonStyle.secondary

            # Create the button
            button = RoleButton(
                cog=self,
                event_id=event_id,
                role_id=role_id,
                label=role_data.get("name", "Unknown"),
                style=style,
                disabled=role_data.get("disabled", False),
                required_role_id=role_data.get("required_role_id")
            )
            view.add_item(button)

        return view

    async def toggle_role(self, interaction, event_id, role_id):
        """Toggle a user's role for an event with locking to prevent concurrent toggles"""
        try:
            print(f"Toggle role called for event_id: {event_id}, role_id: {role_id}")

            # Create a unique lock key for this user and event
            user_id = str(interaction.user.id)

            # Initialize toggle_locks if it doesn't exist
            if not hasattr(self, 'toggle_locks'):
                self.toggle_locks = {}

            lock_key = f"{user_id}:{event_id}"

            # Check if there's already a toggle in progress for this user and event
            if lock_key in self.toggle_locks:
                # Already processing a toggle for this user and event
                try:
                    # Try to respond to the interaction
                    await self.safe_respond(interaction,
                                            "Please wait, your previous request is still processing.",
                                            ephemeral=True
                                            )
                except Exception as e:
                    print(f"Error responding to interaction: {e}")
                return

            # Set the lock
            self.toggle_locks[lock_key] = True

            # Acknowledge the interaction immediately if not already done
            try:
                if not interaction.response.is_done():
                    await interaction.response.defer(ephemeral=True)
            except Exception as e:
                print(f"Error deferring interaction: {e}")

            try:
                # Get the guild ID and user ID
                guild_id = str(interaction.guild.id)
                member = interaction.guild.get_member(int(user_id))

                # Check if the event exists
                if event_id not in self.events:
                    print(f"Event {event_id} not found in self.events")
                    print(f"Available events: {list(self.events.keys())}")
                    await self.safe_respond(interaction, "Event not found. Please contact an administrator.")
                    return

                # Get the event - make a copy to avoid race conditions
                event = copy.deepcopy(self.events[event_id])

                # Check if the role exists
                if role_id not in event.get("roles", {}):
                    await self.safe_respond(interaction, "Role not found.")
                    return

                # Get the role data
                role_data = event["roles"][role_id]
                role_name = role_data.get('name', 'Unknown Role')

                # Check if the user can bypass restrictions
                can_bypass = member and self.can_bypass_signup_restrictions(member, interaction.guild)

                # Check if the role is restricted
                if role_data.get("restricted", False) and not can_bypass:
                    if not self.can_join_restricted_role(interaction.user, role_data):
                        required_role_id = role_data.get("required_role_id")
                        required_role = interaction.guild.get_role(int(required_role_id)) if required_role_id else None
                        role_name = required_role.name if required_role else "required role"
                        await self.safe_respond(
                            interaction,
                            f"You don't have the {role_name} role required to sign up for this position."
                        )
                        return

                # Initialize the users list if it doesn't exist
                if "users" not in role_data:
                    role_data["users"] = []

                # Check current state to determine action
                currently_in_role = user_id in role_data["users"]

                # Prepare response message
                response_message = ""

                # Initialize event_role_users if it doesn't exist
                if "event_role_users" not in event:
                    event["event_role_users"] = []

                # First, check if user is in any other role and remove them
                current_role_id = None
                for other_role_id, other_role_data in event["roles"].items():
                    if other_role_id != role_id and user_id in other_role_data.get("users", []):
                        # Found user in another role, remove them
                        current_role_id = other_role_id
                        other_role_data["users"].remove(user_id)
                        # LOG THE "LEFT" ACTION FOR THE PREVIOUS ROLE
                        try:
                            await self.attendance_tracker.log_to_google_sheets(
                                user_id=user_id,
                                username=interaction.user.display_name,  # ✅ FIXED
                                event_id=event_id,
                                event_title=event["title"],
                                role_id=other_role_id,
                                role_name=other_role_data.get('name', 'Unknown Role'),
                                action="left",
                                guild_id=interaction.guild.id,  # ✅ FIXED
                                guild_name=interaction.guild.name  # ✅ FIXED
                            )
                        except Exception as sheets_error:
                            print(f"Error logging role switch (left) to Google Sheets: {sheets_error}")

                        # Update attendance record for the removed role
                        await self.attendance_tracker.delete_attendance(
                            guild_id=event["guild_id"],
                            user_id=user_id,
                            event_id=event_id,
                            role_id=other_role_id
                        )

                        # Handle Discord role removal if applicable
                        if "discord_role_id" in other_role_data and other_role_data["discord_role_id"]:
                            try:
                                discord_role = interaction.guild.get_role(int(other_role_data["discord_role_id"]))
                                if discord_role and member:
                                    await member.remove_roles(discord_role,
                                                              reason=f"Removed from {event['title']} event role")
                            except Exception as e:
                                print(f"Error removing Discord role: {e}")

                        # Handle Discord role removal if applicable
                        if "discord_role_id" in other_role_data and other_role_data["discord_role_id"]:
                            try:
                                discord_role = interaction.guild.get_role(int(other_role_data["discord_role_id"]))
                                if discord_role and member:
                                    await member.remove_roles(discord_role,
                                                              reason=f"Removed from {event['title']} event role")
                            except Exception as e:
                                print(f"Error removing Discord role: {e}")

                if currently_in_role:
                    # REMOVE USER FROM ROLE (they clicked the same role again)
                    role_data["users"].remove(user_id)
                    response_message = f"You have left the {role_name} role."

                    try:
                        await self.attendance_tracker.log_to_google_sheets(
                            user_id=user_id,
                            username=interaction.user.display_name,
                            event_id=event_id,
                            event_title=event["title"],
                            role_id=role_id,
                            role_name=role_data["name"],
                            action="left",
                            guild_id=interaction.guild.id,
                            guild_name=interaction.guild.name
                        )
                    except Exception as sheets_error:
                        print(f"Error logging role leave to Google Sheets: {sheets_error}")

                    # Update attendance record
                    await self.attendance_tracker.delete_attendance(
                        guild_id=event["guild_id"],
                        user_id=user_id,
                        event_id=event_id,
                        role_id=role_id
                    )

                    # Handle Discord role removal if applicable
                    if "discord_role_id" in role_data and role_data["discord_role_id"]:
                        try:
                            discord_role = interaction.guild.get_role(int(role_data["discord_role_id"]))
                            if discord_role and member:
                                await member.remove_roles(discord_role,
                                                          reason=f"Removed from {event['title']} event role")
                        except Exception as e:
                            print(f"Error removing Discord role: {e}")

                    # Check if user is in any other roles for this event
                    user_in_other_roles = False
                    for other_role_id, other_role_data in event["roles"].items():
                        if other_role_id != role_id and user_id in other_role_data.get("users", []):
                            user_in_other_roles = True
                            break

                    # If not in any other roles, remove event role if it exists
                    if not user_in_other_roles and event.get("event_role_id") and user_id in event.get(
                            "event_role_users", []):
                        try:
                            event_role = interaction.guild.get_role(int(event["event_role_id"]))
                            if event_role and member:
                                await member.remove_roles(event_role,
                                                          reason=f"Left all roles in event: {event['title']}")
                                if user_id in event["event_role_users"]:
                                    event["event_role_users"].remove(user_id)
                        except Exception as e:
                            print(f"Error removing event role: {e}")

                else:
                    # ADD USER TO ROLE
                    # Check if the role has a limit
                    if "limit" in role_data and role_data["limit"] > 0:
                        # Check if the role is full
                        if len(role_data["users"]) >= role_data["limit"] and not can_bypass:
                            await self.safe_respond(interaction, f"The {role_name} role is full.")
                            return

                    # Add the user to the role
                    role_data["users"].append(user_id)

                    # Update attendance record
                    await self.attendance_tracker.record_attendance(
                        guild_id=event["guild_id"],
                        user_id=user_id,
                        event_id=event_id,
                        event_title=event["title"],
                        event_time=event["time"],
                        role_id=role_id,
                        role_name=role_data["name"]
                    )

                    try:
                        await self.attendance_tracker.log_to_google_sheets(
                            user_id=user_id,
                            username=interaction.user.display_name,
                            event_id=event_id,
                            event_title=event["title"],
                            role_id=role_id,
                            role_name=role_data["name"],
                            action="joined",
                            guild_id=interaction.guild.id,
                            guild_name=interaction.guild.name
                        )
                    except Exception as sheets_error:
                        print(f"Error logging role join to Google Sheets: {sheets_error}")

                    if current_role_id:
                        previous_role_name = event["roles"][current_role_id].get('name', 'Unknown Role')
                        response_message = f"You have switched from {previous_role_name} to {role_name}."
                    else:
                        response_message = f"You have joined the {role_name} role."

                    # Add Discord role if applicable
                    if "discord_role_id" in role_data and role_data["discord_role_id"]:
                        try:
                            discord_role = interaction.guild.get_role(int(role_data["discord_role_id"]))
                            if discord_role and member:
                                await member.add_roles(discord_role, reason=f"Joined {event['title']} event role")
                        except Exception as e:
                            print(f"Error adding Discord role: {e}")

                    # Add event role if it exists and user isn't already in it
                    if event.get("event_role_id") and user_id not in event.get("event_role_users", []):
                        try:
                            event_role = interaction.guild.get_role(int(event["event_role_id"]))
                            if event_role and member:
                                await member.add_roles(event_role, reason=f"Joined role in event: {event['title']}")
                                if "event_role_users" not in event:
                                    event["event_role_users"] = []
                                event["event_role_users"].append(user_id)
                        except Exception as e:
                            print(f"Error adding event role: {e}")

                # Update the event in the dictionary
                self.events[event_id] = event

                # Save the events
                await self.save_events(guild_id, update_message=False)

                # Update the message
                await self.update_event_message(event_id)

                # Respond to the interaction
                await self.safe_respond(interaction, response_message)

            finally:
                # Always release the lock
                if hasattr(self, 'toggle_locks') and lock_key in self.toggle_locks:
                    del self.toggle_locks[lock_key]

        except Exception as e:
            print(f"Error toggling role: {e}")
            import traceback
            traceback.print_exc()
            await self.safe_respond(interaction, "An error occurred. Please try again.")
